{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/details/details.component.ts","webpack:///src/app/details/details.component.html","webpack:///src/app/details/personalpro/personalpro.component.ts","webpack:///src/app/details/personalpro/personalpro.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/services/auth-resolver.service.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","authResolver","children","AppRoutingModule","forRoot","imports","providers","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","bootstrap","DetailsComponent","router","authenticationService","subscription","currentUser","subscribe","x","selectedInfo","detail","navigateByUrl","logout","navigate","unsubscribe","getDetails","PersonalproComponent","formBuilder","route","userService","messageService","submitted","loading","detailPageName","snapshot","routeConfig","infoForm","group","firstName","currentUserValue","required","lastName","experience","invalid","updateDetails","value","data","add","severity","summary","onCancel","error","message","reset","controls","onUpdate","LoginComponent","loginForm","username","password","login","form","console","log","users","JSON","parse","localStorage","getItem","user","find","setItem","stringify","setUserSubject","onSubmit","RegisterComponent","registerForm","minLength","register","push","setTimeout","onRegister","AuthResolverService","state","queryParams","returnUrl","url","providedIn","AuthenticationService","http","currentUserObj","currentUserSubject","asObservable","next","authData","post","removeItem","UserService","hasOwnProperty","val","body","status","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DetailsComponent } from './details/details.component';\r\nimport { PersonalproComponent } from './details/personalpro/personalpro.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AuthResolverService } from './services/auth-resolver.service';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: '', redirectTo: 'details/personal', pathMatch: 'full'},\r\n  {\r\n    path:'details', \r\n    component: DetailsComponent, \r\n    resolve: { authResolver : AuthResolverService},\r\n    children: [\r\n      {path:'personal', component: PersonalproComponent},\r\n      {path:'professional', component: PersonalproComponent}\r\n    ]\r\n  },\r\n  {path:'login', component: LoginComponent},\r\n  {path:'register', component: RegisterComponent},\r\n  { path: '**', redirectTo: 'details' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n  providers: [AuthResolverService]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'DashboardApp';\r\n}\r\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { DetailsComponent } from './details/details.component';\r\nimport { PersonalproComponent } from './details/personalpro/personalpro.component';\r\nimport {CardModule} from 'primeng/card';\r\nimport {ToastModule} from 'primeng/toast';\r\nimport {MessageService} from 'primeng/api';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterComponent,\r\n    DetailsComponent,\r\n    PersonalproComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    CardModule,\r\n    ToastModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [MessageService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-details',\r\n  templateUrl: './details.component.html',\r\n  styleUrls: ['./details.component.css']\r\n})\r\nexport class DetailsComponent implements OnInit {\r\n\r\n  currentUser: any;\r\n  firstName: string;\r\n  lastName: string;\r\n  selectedInfo: string;\r\n  subscription: Subscription;\r\n\r\n  constructor(private router: Router,\r\n    private authenticationService: AuthenticationService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\r\n    this.selectedInfo = 'personal';\r\n  }\r\n\r\n  getDetails(detail) {\r\n    switch (detail) {\r\n      case 'personal':\r\n        this.selectedInfo = 'personal';\r\n        this.router.navigateByUrl('/details/personal');\r\n        break;\r\n      case 'pro':\r\n        this.selectedInfo = 'pro';\r\n        this.router.navigateByUrl('/details/professional');\r\n        break\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.authenticationService.logout();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe()\r\n}\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\">\r\n    <div class=\"navbar-nav\">\r\n        <a class=\"nav-item nav-link\"  style=\"cursor: pointer;\" (click)=\"logout()\">Logout</a>\r\n    </div>\r\n</nav>\r\n<div class=\"p-grid\" style=\"height: 100%;\">\r\n    <div class=\"p-col-fixed\" style=\"width:20%\">\r\n        <p-card>\r\n            <div class='nameClass'>Hello, {{currentUser.firstName}} {{currentUser.lastName}}</div>\r\n            <hr>\r\n            <div style=\"height: 40px;\"></div>\r\n            <hr>\r\n            <div class='infoClass' (click)=\"getDetails('personal')\"\r\n                [style.background-color]=\"selectedInfo==='personal' ? 'gainsboro' : null\">Personal Info</div>\r\n            <hr>\r\n            <div class='infoClass' (click)=\"getDetails('pro')\" [style.background-color]=\"selectedInfo==='pro' ? 'gainsboro' : null\">Professional Info</div>\r\n            <hr>\r\n        </p-card>\r\n    </div>\r\n    <div class=\"p-col\">\r\n        <p-card>\r\n            <div>\r\n                <router-outlet></router-outlet>\r\n            </div>\r\n        </p-card>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { MessageService } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'app-personalpro',\r\n  templateUrl: './personalpro.component.html',\r\n  styleUrls: ['./personalpro.component.css']\r\n})\r\nexport class PersonalproComponent implements OnInit {\r\n\r\n  infoForm: FormGroup;\r\n  submitted = false;\r\n  loading = false;\r\n  detailPageName: string;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private userService: UserService,\r\n    private messageService: MessageService,\r\n    private authenticationService: AuthenticationService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.detailPageName = this.route.snapshot.routeConfig.path;\r\n    if (this.detailPageName === 'personal') {\r\n      this.infoForm = this.formBuilder.group({\r\n        firstName: [this.authenticationService.currentUserValue.firstName, Validators.required],\r\n        lastName: [this.authenticationService.currentUserValue.lastName, Validators.required]\r\n      });\r\n    } else if(this.detailPageName === 'professional') {\r\n      this.infoForm = this.formBuilder.group({\r\n        experience: [this.authenticationService.currentUserValue.experience, Validators.required]\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  get form() { return this.infoForm.controls; }\r\n\r\n  onUpdate() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.infoForm.invalid) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n    this.userService.updateDetails(this.infoForm.value).subscribe(\r\n      data => {\r\n        this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Data updated successfully' });\r\n        this.loading = false;\r\n        this.onCancel();\r\n      },\r\n      error => {\r\n        this.messageService.add({ severity: 'info', detail: error.error.message });\r\n        this.loading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n  onCancel() {\r\n    this.submitted = false;\r\n    this.infoForm.reset()\r\n\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 offset-sm-3\">\r\n                <form  [formGroup]=\"infoForm\" (ngSubmit)=\"onUpdate()\">\r\n                    <div class=\"form-group\" *ngIf=\"detailPageName==='professional'\">\r\n                        <label for=\"experience\">Experience</label>\r\n                        <input type=\"text\" formControlName=\"experience\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.experience.errors }\" />\r\n                        <div *ngIf=\"submitted && form.experience.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.experience.errors.required\">Experience is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <ng-container *ngIf=\"detailPageName==='personal'\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"firstName\">First Name</label>\r\n                            <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && form.firstName.errors }\" />\r\n                            <div *ngIf=\"submitted && form.firstName.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"form.firstName.errors.required\">First Name is required</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"lastName\">Last Name</label>\r\n                            <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && form.lastName.errors }\" />\r\n                            <div *ngIf=\"submitted && form.lastName.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"form.lastName.errors.required\">Last Name is required</div>\r\n                            </div>\r\n                        </div>\r\n                    </ng-container>\r\n\r\n                    <div class=\"form-group\">\r\n                        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                            Save\r\n                        </button>\r\n                        <span style=\"cursor: pointer;\" (click)=\"onCancel()\" class=\"btn btn-link\">Cancel</span>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<p-toast position=\"top-center\"></p-toast>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MessageService } from 'primeng/api';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  loading = false;\r\n  // returnUrl: string;\r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private messageService: MessageService) {\r\n    // redirect to home if already logged in\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n\r\n    // get return url from route parameters or default to '/'\r\n    // this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n  get form() { return this.loginForm.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n    this.authenticationService.login(this.form.username.value, this.form.password.value).subscribe(\r\n      data => {\r\n        console.log(\"login data\", data);\r\n        if (data['error']) {\r\n          this.messageService.add({ severity: 'error', detail: 'Username or password is incorrect' });\r\n          this.loading = false;\r\n        } else {\r\n          let users = JSON.parse(localStorage.getItem('users')) || [];\r\n          const user = users.find(x => x.username === this.form.username.value && x.password === this.form.password.value);\r\n\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.authenticationService.setUserSubject(user);\r\n          this.router.navigateByUrl('/details/personal');\r\n        }\r\n      },\r\n      error => {\r\n        this.messageService.add({ severity: 'error', detail: error.error.message });\r\n        this.loading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 offset-sm-3\">\r\n                <h2>Login</h2>\r\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"username\">Username</label>\r\n                        <input type=\"text\" formControlName=\"username\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.username.errors }\" />\r\n                        <div *ngIf=\"submitted && form.username.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.username.errors.required\">Username is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"password\">Password</label>\r\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.password.errors }\" />\r\n                        <div *ngIf=\"submitted && form.password.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.password.errors.required\">Password is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                            Login\r\n                        </button>\r\n                        <a routerLink=\"/register\" class=\"btn btn-link\">Register</a>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<p-toast ></p-toast>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MessageService } from 'primeng/api';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private messageService: MessageService) {\r\n    // redirect to home if already logged in\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registerForm = this.formBuilder.group({\r\n      firstName: ['', Validators.required],\r\n      lastName: ['', Validators.required],\r\n      username: ['', Validators.required],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get form() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onRegister() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n    this.loading = true;\r\n\r\n    this.userService.register(this.registerForm.value).subscribe(\r\n      data => {\r\n        console.log(\"dataa\", data);\r\n        if (data['error']) {\r\n          this.messageService.add({ severity: 'error', detail: data['error'] });\r\n          this.loading = false;\r\n        } else {\r\n          let user = this.registerForm.value;\r\n          user[\"experience\"] = 0;\r\n          let users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n          users.push(user);\r\n          localStorage.setItem(\"users\", JSON.stringify(users));\r\n          this.messageService.add({ severity: 'success', detail: \"Registration successful\" });\r\n          setTimeout(() => { this.router.navigateByUrl('/login'); }, 3000)\r\n        }\r\n      },\r\n      error => {\r\n        this.messageService.add({ severity: 'error', detail: error.error.message });\r\n        this.loading = false;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"jumbotron\">\r\n    <div class=\"container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 offset-sm-3\">\r\n                <h2>Register</h2>\r\n                <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"firstName\">First Name</label>\r\n                        <input type=\"text\" formControlName=\"firstName\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.firstName.errors }\" />\r\n                        <div *ngIf=\"submitted && form.firstName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.firstName.errors.required\">First Name is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" formControlName=\"lastName\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.lastName.errors }\" />\r\n                        <div *ngIf=\"submitted && form.lastName.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.lastName.errors.required\">Last Name is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"username\">Username</label>\r\n                        <input type=\"text\" formControlName=\"username\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.username.errors }\" />\r\n                        <div *ngIf=\"submitted && form.username.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.username.errors.required\">Username is required</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"password\">Password</label>\r\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\"\r\n                            [ngClass]=\"{ 'is-invalid': submitted && form.password.errors }\" />\r\n                        <div *ngIf=\"submitted && form.password.errors\" class=\"invalid-feedback\">\r\n                            <div *ngIf=\"form.password.errors.required\">Password is required</div>\r\n                            <div *ngIf=\"form.password.errors.minlength\">Password must be at least 6 characters</div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                            Register\r\n                        </button>\r\n                        <a routerLink=\"/login\" class=\"btn btn-link\">Cancel</a>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<p-toast></p-toast>","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthResolverService implements Resolve<any> {\r\n\r\n  constructor(        \r\n    private router: Router,\r\n    private authenticationService: AuthenticationService) { }\r\n    \r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    if (currentUser) {\r\n        // authorised so return true\r\n        return true;\r\n    }\r\n\r\n    // not logged in so redirect to login page with the return url\r\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\r\nimport { HttpClient, HttpResponse } from '@angular/common/http';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  private currentUserSubject: BehaviorSubject<any>;\r\n  public currentUser: Observable<any>;\r\n  users = JSON.parse(localStorage.getItem('users')) || [];\r\n\r\n  constructor(private http: HttpClient) {\r\n    let currentUserObj = localStorage.getItem('currentUser');\r\n    console.log('currnetUser', currentUserObj);\r\n    if(currentUserObj){\r\n      console.log('inside', currentUserObj);\r\n      this.currentUserSubject = new BehaviorSubject<any>(currentUserObj);\r\n      this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n\r\n  }\r\n\r\n  public get currentUserValue() {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  setUserSubject(user) {\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  login(username, password) {\r\n    const authData = { username: username, password: password };\r\n    return this.http.post(\"http://dashboardnodebackend-env.eba-wsndghtk.ap-south-1.elasticbeanstalk.com/api/user/login\", authData);\r\n\r\n    // this.users = JSON.parse(localStorage.getItem('users')) || [];\r\n    // const user = this.users.find(x => x.username === username && x.password === password);\r\n    // if (!user) return this.error('Username or password is incorrect');\r\n\r\n    // localStorage.setItem('currentUser', JSON.stringify(user));\r\n    // this.currentUserSubject.next(user);\r\n    // var body = {\r\n    //   username: user.username,\r\n    //   firstName: user.firstName,\r\n    //   lastName: user.lastName\r\n    // }\r\n    // return of(new HttpResponse({ status: 200, body }))\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage and set current user to null\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  error(message) {\r\n    return throwError({ error: { message } });\r\n  }\r\n\r\n}\r\n","import { HttpClient, HttpResponse } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { of, throwError } from \"rxjs\";\r\nimport { AuthenticationService } from \"./authentication.service\";\r\nimport { map } from 'rxjs/operators';\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class UserService {\r\n  // array in local storage for registered users\r\n  users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private http: HttpClient\r\n  ) {}\r\n\r\n  register(user) {\r\n    console.log(\"user\", user);\r\n    const authData = { username: user.username, password: user.password };\r\n    return this.http.post(\"http://dashboardnodebackend-env.eba-wsndghtk.ap-south-1.elasticbeanstalk.com/api/user/signup\", authData);\r\n  }\r\n\r\n  updateDetails(user) {\r\n    if (user.hasOwnProperty(\"experience\")) {\r\n      for (var val of this.users) {\r\n        if (\r\n          val.username === this.authenticationService.currentUserValue.username\r\n        ) {\r\n          if (user.experience === val.experience)\r\n            return this.error(\"No change in data\");\r\n          val.experience = user.experience;\r\n          break;\r\n        }\r\n      }\r\n      var body = {\r\n        firstName: this.authenticationService.currentUserValue.firstName,\r\n        lastName: this.authenticationService.currentUserValue.lastName,\r\n        username: this.authenticationService.currentUserValue.username,\r\n        password: this.authenticationService.currentUserValue.password,\r\n        experience: user.experience,\r\n      };\r\n    } else {\r\n      for (var val of this.users) {\r\n        if (\r\n          val.username === this.authenticationService.currentUserValue.username\r\n        ) {\r\n          if (user.firstName === val.firstName && user.lastName == val.lastName)\r\n            return this.error(\"No change in data\");\r\n          val.firstName = user.firstName;\r\n          val.lastName = user.lastName;\r\n          break;\r\n        }\r\n      }\r\n      var body = {\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        username: this.authenticationService.currentUserValue.username,\r\n        password: this.authenticationService.currentUserValue.password,\r\n        experience: this.authenticationService.currentUserValue.experience,\r\n      };\r\n    }\r\n\r\n    localStorage.setItem(\"users\", JSON.stringify(this.users));\r\n\r\n    localStorage.setItem(\"currentUser\", JSON.stringify(body));\r\n    this.authenticationService.setUserSubject(body);\r\n    return of(new HttpResponse({ status: 200, body }));\r\n  }\r\n\r\n  error(message) {\r\n    return throwError({ error: { message } });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}